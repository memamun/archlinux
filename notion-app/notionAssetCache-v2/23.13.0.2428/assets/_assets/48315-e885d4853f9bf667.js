"use strict";(globalThis.webpackChunknotion_next=globalThis.webpackChunknotion_next||[]).push([[48315],{94522:(e,t,o)=>{o.d(t,{Cq:()=>j,SL:()=>_,V4:()=>I,ZE:()=>P,aY:()=>D,bX:()=>M,dh:()=>f,n2:()=>m,qS:()=>b,u1:()=>K,vL:()=>h,zQ:()=>A});o(16280),o(410838),o(944114),o(898992),o(354520),o(672577),o(581454);var r=()=>o(287903),a=()=>o(725649),n=()=>o(202761),i=()=>o(724639),s=()=>o(985854),l=()=>o(496603),p=()=>o(255299),d=()=>o(890754),u=()=>o(630116),c=()=>o(809120),y=()=>o(282273);function f(e){var t;return(null===(t=e.getModel())||void 0===t?void 0:t.getData())||s().ZB}function _(e){const{clientStore:t,threadStore:o}=e,r=(0,p().A3)({clientStore:t,threadStore:o}),a=r.findLast(i().S7);if(!a||a.saved)return;return{step:a,value:(0,i().Yp)({workflowStep:a,transcript:r})}}function m(e){var t;const{workflowStore:o,threadStore:r,clientStore:a,environment:n}=e,s=null===(t=(0,d().getChatSidebarState)(n))||void 0===t?void 0:t.workflowStepId;if(r&&a){const e=s?function(e){const{clientStore:t,threadStore:o,workflowStepId:r}=e,a=(0,p().A3)({clientStore:t,threadStore:o}),n=a.find((e=>e.id===r));if(!n||!(0,i().S7)(n))return;return{step:n,value:(0,i().Yp)({workflowStep:n,transcript:a})}}({threadStore:r,clientStore:a,workflowStepId:s}):_({threadStore:r,clientStore:a});if(e)return e.value}return o?f(o):void 0}function b(e){return m(e)??f(e.workflowStore)}function v(e,t,o){if(!e)return(null==t?void 0:t.map((e=>({value:e,diff:"added"}))))||[];if(!t)return e.map((e=>({value:e,diff:"removed"})));const r=new Map(e.map((e=>[e[o],e]))),a=new Map(t.map((e=>[e[o],e]))),n=[];for(const[i,s]of a)if(r.has(i)){const e=r.get(i);l().n4(e,s)||n.push({value:s,diff:"changed"})}else n.push({value:s,diff:"added"});for(const[i,s]of r)a.has(i)||n.push({value:s,diff:"removed"});return n}function g(e){const{schema:t,propertyKeyToIdMap:o}=(0,a().DK)(e)||{};return Object.entries(t||{}).filter((e=>{let[t]=e;return"content"!==t})).map((e=>{let[t,r]=e;return{key:t,propertyId:(null==o?void 0:o[t])??t,property:(0,y().Y1)(r)}}))}function h(e){const{oldState:t,newState:o}=e;return v(g(t),g(o),"propertyId")}function w(e){const{previousDatabaseModule:t,newDatabaseModule:o,databaseModules:n,databaseKeyMap:i,store:s}=e,l=(0,a().DK)(o.state);if(null==l||!l.pointer){if(t)throw new Error("New database should not have a previous module");return h({oldState:void 0,newState:l})}const p=u().md.createChildStore(s,l.pointer),d=(0,r().Vn)({notionSchema:p.getSchema(),databaseKey:o.key,databaseKeyMap:i}),{mappedDiff:c}=M({collectionStore:p,previousDatabaseModule:t,newDatabaseModule:o,databaseModules:n,databaseKeyMap:i,connectedRelationCollections:d});return c}function M(e){const{previousDatabaseModule:t,newDatabaseModule:o,databaseModules:n,databaseKeyMap:i,collectionStore:s,connectedRelationCollections:l}=e;let p=null==t?void 0:t.state;const d=(0,a().DK)(o.state);null!=d&&d.pointer&&!t&&(p=(0,r().Rr)({databaseKey:o.key,schema:s.getSchema(),databaseModules:n}));const u=h({oldState:p,newState:d}),{schema:y,deletedSchema:f}=(0,c().uD)({databaseKeyMap:i,diff:u,notionSchema:s.getSchema(),connectedRelationCollections:l}),_=(0,r().Rr)({databaseKey:o.key,schema:s.getSchema(),databaseModules:n}),m=(0,r().Rr)({databaseKey:o.key,schema:y,databaseModules:n});return{newBlockSchema:y,newDeletedBlockSchema:f,mappedDiff:h({oldState:_,newState:m}),newMappedSchema:m.schema,newPropertyKeyToIdMap:m.propertyKeyToIdMap}}function k(e){const{lastSavedStepModules:t,newModules:o,store:r}=e,a=new Map((t??[]).filter((e=>"database"===e.type)).map((e=>[e.key,e]))),n=new Map((o??[]).filter((e=>"database"===e.type)).map((e=>[e.key,e]))),i=Array.from(n.values()),s=(0,c().GG)(i),p=[];for(const[d,u]of n){const e=a.get(d),t=w({store:r,previousDatabaseModule:e,newDatabaseModule:u,databaseModules:i,databaseKeyMap:s});if(!e){p.push({module:u,diff:"added",schemaChanges:t,metadataDiff:"none"});continue}const o=!l().n4({...e.state,schema:{},propertyKeyToIdMap:{}},{...u.state,schema:{},propertyKeyToIdMap:{}});(t.length>0||o)&&p.push({module:u,schemaChanges:t,metadataDiff:o?"changed":"none",diff:"changed"})}for(const[l,d]of a)n.has(l)||p.push({module:d,diff:"removed",schemaChanges:[],metadataDiff:"none"});return p}function S(e){const{key:t,...o}=e;return(0,y().Y1)(o)}function x(e){const{lastSavedStepViews:t,newViews:o,store:r,lastSavedStepModules:a}=e,n=[],i=K({store:r,modules:a||[],views:o||[]}),s=new Map(i.filter((e=>e.pointer)).map((e=>{var t;return[null===(t=e.pointer)||void 0===t?void 0:t.id,e]}))),p=new Map((t??[]).filter((e=>e.pointer)).map((e=>{var t;return[null===(t=e.pointer)||void 0===t?void 0:t.id,e]})));for(const c of o??[]){var d;if(!c.pointer){n.push({value:c,diff:"added"});continue}const e=s.get(null===(d=c.pointer)||void 0===d?void 0:d.id);e?l().n4(S(e),S(c))||n.push({value:c,diff:"changed"}):n.push({value:c,diff:"added"})}const u=new Map((o??[]).filter((e=>e.pointer)).map((e=>{var t;return[null===(t=e.pointer)||void 0===t?void 0:t.id,e]})));for(const[l,c]of p)u.has(l)||n.push({value:c,diff:"removed"});return n}function K(e){const{store:t,modules:o,views:r}=e;return l().oE(t.getCollectionViewStores().map((e=>{const t=e.getValue(),i=r.find((t=>{var o;return(null===(o=t.pointer)||void 0===o?void 0:o.id)===e.id}));if(t){if((0,n().T$)(t)){const r=e.getCollectionStore(),s=null==r?void 0:r.getSchema(),l=r?o.find((e=>{var t;return"database"===e.type&&(null===(t=(0,a().DK)(e.state))||void 0===t||null===(t=t.pointer)||void 0===t?void 0:t.id)===r.id})):void 0;if(!l||!s)return;return(0,n().Qt)({collectionView:t,databaseModule:l,schema:s,workflowView:i})}return(0,n().Jo)({collectionView:t,workflowView:i})}})))}function q(e){return e.filter((e=>"database"!==e.type&&"users"!==e.type&&"files"!==e.type&&"recurrence"!==e.type&&"discussions"!==e.type&&"agent"!==e.type))}function B(e){const{store:t,savedWorkflow:o,newWorkflow:r}=e,a=(o.functionPointers??[]).map((e=>u().je.createChildStore(t,e))),n=(r.functionPointers??[]).map((e=>u().je.createChildStore(t,e)));return v(D(a),D(n),"key").map((e=>({value:e.value,diff:e.diff})))}function D(e){return e.filter((e=>e.isFunction())).map((e=>e.getData())).filter((e=>void 0!==e))}function P(e){const{savedWorkflow:t=s().ZB,previousWorkflow:o=s().ZB,newWorkflow:r,store:a}=e;return{description:t.description===r.description?"none":"changed",databaseModules:k({store:a,lastSavedStepModules:o.modules,newModules:r.modules}),connections:v(q(t.modules||[]),q(r.modules||[]),"key"),triggers:v(t.triggers,r.triggers,"key"),functions:B({store:a,savedWorkflow:t,newWorkflow:r}),views:x({store:a,lastSavedStepViews:o.views,newViews:r.views,lastSavedStepModules:o.modules||[]})}}function A(e){const{module:t,store:o}=e,r=I({module:t,store:o});return!!r&&r.getParentId()!==o.id}function j(e){const{workflowStore:t,threadStore:o,clientStore:r}=e,a=(null==t?void 0:t.getSpaceId())??(null==o?void 0:o.getSpaceId());if(!a)throw new Error("No spaceId found in workflowStore or threadStore");if(o&&r){if(_({threadStore:o,clientStore:r}))return{table:"thread",id:o.id,spaceId:a}}if(t)return{table:"workflow",id:t.id,spaceId:a};throw new Error("No workflow definition pointer found")}function I(e){let{module:t,store:o}=e;const r=(0,a().DK)(t.state);if(null!=r&&r.pointer)return u().md.createChildStore(o,r.pointer)}},202761:(e,t,o)=>{o.d(t,{jU:()=>S,Qt:()=>b,T$:()=>m,Jo:()=>v});o(16280),o(944114),o(517642),o(658004),o(733853),o(845876),o(432475),o(515024),o(731698),o(898992),o(354520),o(672577),o(430670),o(581454);var r=()=>o(496603),a=()=>o(534177),n=()=>o(638681),i=()=>o(289915),s=()=>o(651124),l=()=>o(390066),p=()=>o(179034),d=()=>o(869558),u=()=>o(798880),c=()=>o(287903),y=()=>o(725649);n().union([n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0}),n().object({required:{operator:n().literals("string_contains","string_does_not_contain","string_ends_with","string_is","string_is_not","string_starts_with"),value:n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})},optional:{},exact:!0})]),n().union([n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0}),n().object({required:{operator:n().literals("number_does_not_equal","number_equals","number_greater_than","number_greater_than_or_equal_to","number_less_than","number_less_than_or_equal_to"),value:n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().number()])},optional:{},exact:!0})},optional:{},exact:!0})]),n().union([n().object({required:{operator:n().literals("date_is","date_is_after","date_is_before","date_is_on_or_after","date_is_on_or_before"),value:n().union([n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0}),n().object({required:{type:n().literal("relative"),value:n().literals("one_month_ago","one_month_from_now","one_week_ago","one_week_from_now","today","tomorrow","yesterday")},optional:{},exact:!0})])},optional:{use_end:n().boolean()},exact:!0}),n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0})]),n().union([n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0}),n().object({required:{type:n().literal("relative"),value:n().literals("one_month_ago","one_month_from_now","one_week_ago","one_week_from_now","today","tomorrow","yesterday")},optional:{},exact:!0})]),n().union([n().object({required:{operator:n().literals("enum_is","enum_is_not"),value:n().union([n().array(n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})),n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})])},optional:{},exact:!0}),n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0})]),n().union([n().object({required:{operator:n().literals("enum_contains","enum_does_not_contain"),value:n().union([n().array(n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})),n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})])},optional:{},exact:!0}),n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0})]),n().object({required:{operator:n().literals("checkbox_is","checkbox_is_not"),value:n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().literal(!1),n().literal(!0)])},optional:{},exact:!0})},optional:{},exact:!0}),n().union([n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0}),n().object({required:{operator:n().literals("relation_contains","relation_does_not_contain"),value:n().union([n().array(n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})),n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})])},optional:{},exact:!0})]),n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0}),n().union([n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0}),n().object({required:{operator:n().literals("status_is","status_is_not"),value:n().union([n().array(n().object({required:{type:n().literals("is_group","is_option"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})),n().object({required:{type:n().literals("is_group","is_option"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0})])},optional:{},exact:!0})]),n().union([n().object({required:{operator:n().literals("is_empty","is_not_empty")},optional:{},exact:!0}),n().object({required:{operator:n().literals("person_contains","person_does_not_contain"),value:n().union([n().array(n().union([n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0}),n().object({required:{type:n().literal("relative"),value:n().literal("me")},optional:{},exact:!0})])),n().object({required:{type:n().literal("exact"),value:n().union([n().isUndefined(),n().string()])},optional:{},exact:!0}),n().object({required:{type:n().literal("relative"),value:n().literal("me")},optional:{},exact:!0})])},optional:{},exact:!0})]),'\nIn addition to action: "update", key, name, and type, you must provide additional properties in order to match one of the following UpdateView types:\n\n// Defines how to filter items in a view. Can be nested.\nFilter = {\n\toperator: "and" | "or",\n\tfilters: Array<PropertyFilter | Filter>\n}\n\n// Defines how to filter by a specific property.\nPropertyFilter = {\n\tproperty: string,\n\tfilter: TextFilter | NumberFilter | DateFilter | SelectFilter | MultiSelectFilter | CheckboxFilter | RelationFilter | FileFilter | StatusFilter | PersonFilter\n}\n\n// Defines how to filter text properties.\nTextFilter = {\n\toperator: "string_is" | "string_is_not" | "string_contains" | "string_does_not_contain" | "string_starts_with" | "string_ends_with",\n\tvalue: { type: "exact", value: string | undefined }\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter number properties.\nNumberFilter = {\n\toperator: "number_equals" | "number_does_not_equal" | "number_greater_than" | "number_less_than" | "number_greater_than_or_equal_to" | "number_less_than_or_equal_to",\n\tvalue: { type: "exact", value: number | undefined }\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter date properties.\nDateFilter = {\n\toperator: "date_is" | "date_is_before" | "date_is_after" | "date_is_on_or_before" | "date_is_on_or_after",\n\tvalue:\n\t\t| { type: "exact", value: string | undefined } // ISO 8601 date string\n\t\t| { type: "relative", value: "today" | "tomorrow" | "yesterday" | "one_week_ago" | "one_week_from_now" | "one_month_ago" | "one_month_from_now" },\n\tuse_end?: boolean\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter select properties.\nSelectFilter = {\n\toperator: "enum_is" | "enum_is_not",\n\tvalue: { type: "exact", value: string | undefined } | Array<{ type: "exact", value: string | undefined }>\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter multi-select properties.\nMultiSelectFilter = {\n\toperator: "enum_contains" | "enum_does_not_contain",\n\tvalue: { type: "exact", value: string | undefined } | Array<{ type: "exact", value: string | undefined }>\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter checkbox properties.\nCheckboxFilter = {\n\toperator: "checkbox_is" | "checkbox_is_not",\n\tvalue: { type: "exact", value: boolean | undefined }\n}\n\n// Defines how to filter relation properties.\nRelationFilter = {\n\toperator: "relation_contains" | "relation_does_not_contain",\n\tvalue: { type: "exact", value: string | undefined } | Array<{ type: "exact", value: string | undefined }>\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter file properties.\nFileFilter = {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter status properties.\nStatusFilter = {\n\toperator: "status_is" | "status_is_not",\n\tvalue: { type: "is_group" | "is_option", value: string | undefined } | Array<{ type: "is_group" | "is_option", value: string | undefined }>\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to filter person properties.\nPersonFilter = {\n\toperator: "person_contains" | "person_does_not_contain",\n\tvalue: { type: "exact", value: string | undefined } | { type: "relative", value: "me" } | Array<{ type: "exact", value: string | undefined } | { type: "relative", value: "me" }> // String values are Notion user IDs\n} | {\n\toperator: "is_empty" | "is_not_empty"\n}\n\n// Defines how to sort items in a view.\nSort = {\n\t// Must be a valid property from the database schema that is not content.\n\tproperty: string,\n\tdirection: "ascending" | "descending"\n}\n\n// Defines how to group items in a view.\nGroupBy = {\n\tproperty: string,\n\thideEmptyGroups?: boolean\n} & (\n\t{\n\t\ttype: "title" | "text" | "url" | "email" | "phone_number",\n\t\tgroupBy: "exact" | "alphabet_prefix",\n\t\tsort: "manual" | "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "number",\n\t\tgroupBy?: { type: "unique", start?: number, end?: number },\n\t\tstart: number,\n\t\tend: number,\n\t\tsize: number,\n\t\tsort: "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "date" | "created_time" | "last_edited_time",\n\t\tgroupBy: "relative" | "day" | "week" | "month" | "year",\n\t\tsort: "ascending" | "descending",\n\t\tstartDayOfWeek?: 0 | 1\n\t} |\n\t{\n\t\ttype: "select" | "multi_select",\n\t\tsort: "manual" | "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "status",\n\t\tgroupBy: "group" | "option",\n\t\tsort: "manual" | "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "person",\n\t\tsort: "manual"\n\t} |\n\t{\n\t\ttype: "relation",\n\t\tsort: "manual" | "ascending" | "descending"\n\t} |\n\t{\n\t\ttype: "checkbox",\n\t\tsort: "manual"\n\t}\n)\n\n// Each updated view must match one of the following types:\nUpdateView = {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "table",\n\tdatabaseKey: string,\n\t// Properties from the database schema that should be shown as columns, excluding content type. Must include the title property.\n\tcolumns: Array<string>,\n\t// Optional property to group rows by, must be a valid property from schema that is not content.\n\tgroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "board",\n\tdatabaseKey: string,\n\t// Required property to group cards by, must be a valid property from schema that is not content.\n\tgroupBy: GroupBy,\n\t// Optional properties to show on cards, excluding content and title.\n\tcardAdditionalProperties?: Array<string>,\n\t// Optional secondary grouping property, must be a valid property from schema that is not content.\n\tsubGroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "calendar",\n\tdatabaseKey: string,\n\t// Required date property to use for calendar view (must be date, created_time, or last_edited_time).\n\tcalendarBy: string,\n\t// Optional properties to show on cards, excluding content and title.\n\tcardAdditionalProperties?: Array<string>,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "list",\n\tdatabaseKey: string,\n\t// Optional properties to show for each item, excluding content and title.\n\trowAdditionalProperties?: Array<string>,\n\t// Optional property to group items by, must be a valid property from schema that is not content.\n\tgroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "gallery",\n\tdatabaseKey: string,\n\t// Optional properties to show on cards, excluding content and title.\n\tcardAdditionalProperties?: Array<string>,\n\t// Optional property to group cards by, must be a valid property from schema that is not content.\n\tgroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "timeline",\n\tdatabaseKey: string,\n\t// Required date property to use for timeline (must be date, created_time, or last_edited_time).\n\ttimelineBy: string,\n\t// Optional properties to show on cards, excluding content and title\n\trowAdditionalProperties?: Array<string>,\n\t// Optional property to group items by, must be a valid property from schema that is not content.\n\tgroupBy?: GroupBy,\n\tfilter?: Filter,\n\tsorts?: Array<Sort>\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "chat"\n} | {\n\taction: "update",\n\tkey: string,\n\tname: string,\n\ttype: "custom"\n}\n'.trim();function f(e){const{properties:t,databaseModule:o}=e;if(!t)return[];const r=[];for(const a of t){if(!0!==a.visible)continue;const e=h({propertyId:a.property,databaseModule:o});e&&r.push(e)}return r}function _(e){const{collectionView:t,workflowView:o}=e,r=t.name??"",a={table:d().Gy,id:t.id,spaceId:t.space_id};if(o&&o.pointer)return{name:r,key:o.key,pointer:a};return{name:r,key:(0,c().PD)(r||t.type),pointer:a}}function m(e){return"table"===e.type||"board"===e.type||"calendar"===e.type||"list"===e.type||"gallery"===e.type||"timeline"===e.type}function b(e){const{collectionView:t,databaseModule:o,schema:r,workflowView:n}=e,{name:i,key:p,pointer:d}=_({collectionView:t,workflowView:n});if("table"===t.type){var u,c;const e=(0,l().L)(t.format,r,t.query2,s().jf.Table);return{type:"table",key:p,name:i,databaseKey:o.key,columns:f({properties:e.table_properties,databaseModule:o}),groupBy:g({groupBy:e.collection_group_by,databaseModule:o}),filter:w({collectionView:t,filter:null===(u=t.query2)||void 0===u?void 0:u.filter,databaseModule:o}),sorts:M({sort:null===(c=t.query2)||void 0===c?void 0:c.sort,databaseModule:o}),pointer:d}}if("board"===t.type){var y,m,b,v;const e=null===(y=t.format)||void 0===y?void 0:y.board_columns_by;if(!e)throw new Error("Board group by property is required");const r=g({groupBy:e,databaseModule:o});if(!r)throw new Error("Board group by property is required");return{type:"board",key:p,name:i,databaseKey:o.key,groupBy:r,cardAdditionalProperties:f({properties:null===(m=t.format)||void 0===m?void 0:m.board_properties,databaseModule:o}),filter:w({collectionView:t,filter:null===(b=t.query2)||void 0===b?void 0:b.filter,databaseModule:o}),sorts:M({sort:null===(v=t.query2)||void 0===v?void 0:v.sort,databaseModule:o}),pointer:d}}if("calendar"===t.type){var k,S,x,K;const e=null===(k=t.query2)||void 0===k?void 0:k.calendar_by;if(!e)throw new Error("Calendar by property is required");const r=h({propertyId:e,databaseModule:o});if(!r)return;return{type:"calendar",key:p,name:i,databaseKey:o.key,calendarBy:r,cardAdditionalProperties:f({properties:null===(S=t.format)||void 0===S?void 0:S.calendar_properties,databaseModule:o}),filter:w({collectionView:t,filter:null===(x=t.query2)||void 0===x?void 0:x.filter,databaseModule:o}),sorts:M({sort:null===(K=t.query2)||void 0===K?void 0:K.sort,databaseModule:o}),pointer:d}}var q,B,D,P,A,j,I,F;if("list"===t.type)return{type:"list",key:p,name:i,databaseKey:o.key,rowAdditionalProperties:f({properties:null===(q=t.format)||void 0===q?void 0:q.list_properties,databaseModule:o}),groupBy:null!==(B=t.format)&&void 0!==B&&B.collection_group_by?g({groupBy:t.format.collection_group_by,databaseModule:o}):void 0,filter:w({collectionView:t,filter:null===(D=t.query2)||void 0===D?void 0:D.filter,databaseModule:o}),sorts:M({sort:null===(P=t.query2)||void 0===P?void 0:P.sort,databaseModule:o}),pointer:d};if("gallery"===t.type)return{type:"gallery",key:p,name:i,databaseKey:o.key,cardAdditionalProperties:f({properties:null===(A=t.format)||void 0===A?void 0:A.gallery_properties,databaseModule:o}),groupBy:null!==(j=t.format)&&void 0!==j&&j.collection_group_by?g({groupBy:t.format.collection_group_by,databaseModule:o}):void 0,filter:w({collectionView:t,filter:null===(I=t.query2)||void 0===I?void 0:I.filter,databaseModule:o}),sorts:M({sort:null===(F=t.query2)||void 0===F?void 0:F.sort,databaseModule:o}),pointer:d};if("timeline"===t.type){var V,C,E,T,O;const e=null===(V=t.query2)||void 0===V?void 0:V.timeline_by;if(!e)throw new Error("Timeline by property is required");const r=h({propertyId:e,databaseModule:o});if(!r)return;return{type:"timeline",key:p,name:i,databaseKey:o.key,timelineBy:r,rowAdditionalProperties:f({properties:null===(C=t.format)||void 0===C?void 0:C.timeline_properties,databaseModule:o}),groupBy:null!==(E=t.format)&&void 0!==E&&E.collection_group_by?g({groupBy:t.format.collection_group_by,databaseModule:o}):void 0,filter:w({collectionView:t,filter:null===(T=t.query2)||void 0===T?void 0:T.filter,databaseModule:o}),sorts:M({sort:null===(O=t.query2)||void 0===O?void 0:O.sort,databaseModule:o}),pointer:d}}(0,a().HB)(t.type)}function v(e){const{collectionView:t,workflowView:o}=e,{name:r,key:a,pointer:n}=_({collectionView:t,workflowView:o});if("chat"===t.type)return{type:"chat",key:a,name:r,pointer:n};if("custom"===t.type)return{type:"custom",key:a,name:r,pointer:n};if("form_editor"!==t.type&&"feed"!==t.type&&"chart"!==t.type&&"page"!==t.type&&"map"!==t.type)throw new Error(`Unsupported collection view type: ${t.type}`)}function g(e){const{groupBy:t,databaseModule:o}=e;if(!t)return;const r=h({propertyId:t.property,databaseModule:o});if(!r)return;const a={property:r,hideEmptyGroups:t.hideEmptyGroups};switch(t.type){case"title":case"text":case"url":case"email":case"phone_number":return{...a,type:t.type,groupBy:t.groupBy||"exact",sort:t.sort.type||"manual"};case"number":return{...a,type:"number",start:t.start||0,end:t.end||100,size:t.size||10,sort:t.sort.type||"ascending",groupBy:t.groupBy};case"date":case"created_time":case"last_edited_time":return{...a,type:t.type,groupBy:t.groupBy||"relative",sort:t.sort.type||"ascending",startDayOfWeek:t.startDayOfWeek};case"select":case"multi_select":case"relation":return{...a,type:t.type,sort:t.sort.type||"manual"};case"status":return{...a,type:"status",groupBy:t.groupBy||"group",sort:t.sort.type||"manual"};case"person":return{...a,type:"person",sort:"manual"};case"checkbox":return{...a,type:"checkbox",sort:"manual"};default:return}}function h(e){var t;const{propertyId:o,databaseModule:r}=e,a=Object.entries((null===(t=(0,y().DK)(r.state))||void 0===t?void 0:t.propertyKeyToIdMap)||{}).find((e=>{let[t,r]=e;return r===o}));if(a)return a[0]}function w(e){const{collectionView:t,filter:o,databaseModule:r}=e;if(o)return{operator:o.operator,filters:(o.filters||[]).flatMap((e=>{if((0,i().dU)(e)){const o=w({collectionView:t,filter:e,databaseModule:r});return o?[o]:[]}if((0,i().yX)(e)){const t=function(e){const{filter:t,databaseModule:o}=e,r=t.filter.operator,n=h({propertyId:t.property,databaseModule:o});if(!n)return;if("string_is"===r||"string_is_not"===r||"string_contains"===r||"string_does_not_contain"===r||"string_starts_with"===r||"string_ends_with"===r)return{property:n,filter:{operator:r,value:t.filter.value}};if("checkbox_is"===r||"checkbox_is_not"===r)return{property:n,filter:{operator:r,value:t.filter.value}};if("enum_is"===r||"enum_is_not"===r||"enum_contains"===r||"enum_does_not_contain"===r)return{property:n,filter:{operator:r,value:t.filter.value}};if("status_is"===r||"status_is_not"===r)return{property:n,filter:{operator:r,value:t.filter.value}};if("relation_contains"===r||"relation_does_not_contain"===r){const e=t.filter.value,o=Array.isArray(e)?e.flatMap((e=>"exact"===e.type?[{type:"exact",value:e.value}]:[])):"exact"===e.type?{type:"exact",value:e.value}:void 0;if(!o||Array.isArray(o)&&0===o.length)return;return{property:n,filter:{operator:r,value:o}}}if("person_contains"===r||"person_does_not_contain"===r){var i;const e=t.filter.value,o=Array.isArray(e)?e.flatMap((e=>{var t;return"exact"===e.type&&null!==(t=e.value)&&void 0!==t&&t.id?[{type:"exact",value:e.value.id}]:[]})):"exact"===e.type?{type:"exact",value:null===(i=e.value)||void 0===i?void 0:i.id}:void 0;if(!o||Array.isArray(o)&&0===o.length)return;return{property:n,filter:{operator:r,value:o}}}if("number_equals"===r||"number_does_not_equal"===r||"number_greater_than"===r||"number_less_than"===r||"number_greater_than_or_equal_to"===r||"number_less_than_or_equal_to"===r){return{property:n,filter:{operator:r,value:t.filter.value}}}if("date_is"===r||"date_is_before"===r||"date_is_after"===r||"date_is_on_or_before"===r||"date_is_on_or_after"===r){var s;const e=t.filter.value;return{property:n,filter:{operator:r,value:"exact"===e.type?{type:"exact",value:null===(s=e.value)||void 0===s?void 0:s.start_date}:e}}}if("is_empty"===r||"is_not_empty"===r)return{property:n,filter:{operator:r}};if("enum_contains_all"===r||"string_has_no_alphabet_prefix"===r||"location_is"===r||"location_is_not"===r||"verification_is"===r||"verification_is_not"===r||"any"===r||"none"===r||"every"===r||"date_is_within"===r||"date_is_relative_to"===r||"geo_point_is_within"===r||"geo_point_is_not_within"===r)return;(0,a().HB)(r)}({filter:e,databaseModule:r});return t?[t]:[]}return[]}))}}function M(e){const{sort:t,databaseModule:o}=e;if(t&&0!==t.length)return r().oE(t.map((e=>{const t=h({propertyId:e.property,databaseModule:o});if(t)return{property:t,direction:e.direction}})))}function k(e){const{existingPropertyFormats:t,workflowPropertyKeys:o,databaseModule:a,schema:n}=e;if(!o)return t||[];const i=r().oE(o.map((e=>K({propertyKey:e,databaseModule:a})))),s=new Set(i),l=new Set(null==t?void 0:t.map((e=>e.property))),p=(null==t?void 0:t.map((e=>{const t=n[e.property];if(!t)return e;if((0,c().pP)(t))return e;const o=s.has(e.property);return{...e,visible:o}})))||[];for(const r of i)l.has(r)||p.push({property:r,visible:!0});return p}function S(e){const{workflowView:t,databaseModules:o,collectionViewPointer:r,collectionViewBlockPointer:n,collectionViewFormat:i}=e,s=[],l={id:r.id,name:t.name,type:t.type,parent_id:n.id,parent_table:p().ev,space_id:r.spaceId,alive:!0};if(s.push({pointer:r,path:[],command:"update",args:l}),"table"===t.type){if(!t.databaseKey)throw new Error(`DatabaseKey not found in: ${JSON.stringify(t)}`);const{databaseModule:e,collectionPointer:a,schema:n}=x({databaseModules:o,key:t.databaseKey}),l={collection_pointer:a,table_properties:k({existingPropertyFormats:null==i?void 0:i.table_properties,workflowPropertyKeys:t.columns,databaseModule:e,schema:n}),collection_group_by:q({groupBy:t.groupBy,databaseModule:e})};s.push({pointer:r,path:["format"],command:"update",args:l});const p={filter:B({filter:t.filter,databaseModule:e}),sort:D({sorts:t.sorts,databaseModule:e})};s.push({pointer:r,path:["query2"],command:"update",args:p})}else if("board"===t.type){const{databaseModule:e,collectionPointer:a,schema:n}=x({databaseModules:o,key:t.databaseKey}),l={collection_pointer:a,board_columns_by:q({groupBy:t.groupBy,databaseModule:e}),collection_group_by:q({groupBy:t.subGroupBy,databaseModule:e}),board_properties:k({existingPropertyFormats:null==i?void 0:i.board_properties,workflowPropertyKeys:t.cardAdditionalProperties,databaseModule:e,schema:n})};s.push({pointer:r,path:["format"],command:"update",args:l});const p={filter:B({filter:t.filter,databaseModule:e}),sort:D({sorts:t.sorts,databaseModule:e})};s.push({pointer:r,path:["query2"],command:"update",args:p})}else if("calendar"===t.type){const{databaseModule:e,collectionPointer:a,schema:n}=x({databaseModules:o,key:t.databaseKey}),l={collection_pointer:a,calendar_properties:k({existingPropertyFormats:null==i?void 0:i.calendar_properties,workflowPropertyKeys:t.cardAdditionalProperties,databaseModule:e,schema:n})};s.push({pointer:r,path:["format"],command:"update",args:l});const p={filter:B({filter:t.filter,databaseModule:e}),sort:D({sorts:t.sorts,databaseModule:e}),calendar_by:K({propertyKey:t.calendarBy,databaseModule:e})};s.push({pointer:r,path:["query2"],command:"update",args:p})}else if("list"===t.type){const{databaseModule:e,collectionPointer:a,schema:n}=x({databaseModules:o,key:t.databaseKey}),l={collection_pointer:a,collection_group_by:q({groupBy:t.groupBy,databaseModule:e}),list_properties:k({existingPropertyFormats:null==i?void 0:i.list_properties,workflowPropertyKeys:t.rowAdditionalProperties,databaseModule:e,schema:n})};s.push({pointer:r,path:["format"],command:"update",args:l});const p={filter:B({filter:t.filter,databaseModule:e}),sort:D({sorts:t.sorts,databaseModule:e})};s.push({pointer:r,path:["query2"],command:"update",args:p})}else if("gallery"===t.type){const{databaseModule:e,collectionPointer:a,schema:n}=x({databaseModules:o,key:t.databaseKey}),l={collection_pointer:a,collection_group_by:q({groupBy:t.groupBy,databaseModule:e}),gallery_properties:k({existingPropertyFormats:null==i?void 0:i.gallery_properties,workflowPropertyKeys:t.cardAdditionalProperties,databaseModule:e,schema:n})};s.push({pointer:r,path:["format"],command:"update",args:l});const p={filter:B({filter:t.filter,databaseModule:e}),sort:D({sorts:t.sorts,databaseModule:e})};s.push({pointer:r,path:["query2"],command:"update",args:p})}else if("timeline"===t.type){const{databaseModule:e,collectionPointer:a,schema:n}=x({databaseModules:o,key:t.databaseKey}),l={collection_pointer:a,collection_group_by:q({groupBy:t.groupBy,databaseModule:e}),timeline_properties:k({existingPropertyFormats:null==i?void 0:i.timeline_properties,workflowPropertyKeys:t.rowAdditionalProperties,databaseModule:e,schema:n})};s.push({pointer:r,path:["format"],command:"update",args:l});const p={filter:B({filter:t.filter,databaseModule:e}),sort:D({sorts:t.sorts,databaseModule:e}),timeline_by:K({propertyKey:t.timelineBy,databaseModule:e}),timeline_by_end:t.timelineByEnd?K({propertyKey:t.timelineByEnd,databaseModule:e}):void 0};s.push({pointer:r,path:["query2"],command:"update",args:p})}else"chat"===t.type||"custom"===t.type||(0,a().HB)(t);return s}function x(e){const{databaseModules:t,key:o}=e,r=t.find((e=>e.databaseModule.key===o));if(!r)throw new Error(`Database module not found: ${o}`);return r}function K(e){var t;const{propertyKey:o,databaseModule:r}=e,a=null===(t=(0,y().DK)(r.state))||void 0===t||null===(t=t.propertyKeyToIdMap)||void 0===t?void 0:t[o];if(a)return a}function q(e){const{groupBy:t,databaseModule:o}=e;if(!t)return;const r=K({propertyKey:t.property,databaseModule:o});if(!r)return;const n={property:r,hideEmptyGroups:t.hideEmptyGroups};return"title"===t.type||"text"===t.type||"url"===t.type||"email"===t.type||"phone_number"===t.type?{...n,type:t.type,groupBy:t.groupBy,sort:{type:t.sort}}:"number"===t.type?{...n,type:"number",groupBy:t.groupBy,start:t.start,end:t.end,size:t.size,sort:{type:t.sort}}:"date"===t.type||"created_time"===t.type||"last_edited_time"===t.type?{...n,type:t.type,groupBy:t.groupBy,sort:{type:t.sort},startDayOfWeek:t.startDayOfWeek}:"select"===t.type||"multi_select"===t.type?{...n,type:t.type,sort:{type:t.sort}}:"status"===t.type?{...n,type:"status",groupBy:t.groupBy,sort:{type:t.sort}}:"person"===t.type?{...n,type:"person",sort:{type:"manual"}}:"relation"===t.type?{...n,type:"relation",sort:{type:t.sort}}:"checkbox"===t.type?{...n,type:"checkbox",sort:{type:"manual"}}:void(0,a().HB)(t.type)}function B(e){const{filter:t,databaseModule:o}=e;if(t&&t.filters)return{operator:t.operator,filters:t.filters.flatMap((e=>{if("property"in e){const t=function(e){var t;const{filter:o,databaseModule:r}=e,n=K({propertyKey:o.property,databaseModule:r});if(!n)return;const i=null===(t=(0,y().DK)(r.state))||void 0===t?void 0:t.schema[o.property];if(!i)return;if("string_is"===o.filter.operator||"string_is_not"===o.filter.operator||"string_contains"===o.filter.operator||"string_does_not_contain"===o.filter.operator||"string_starts_with"===o.filter.operator||"string_ends_with"===o.filter.operator)return{property:n,filter:{operator:o.filter.operator,value:o.filter.value}};if("number_equals"===o.filter.operator||"number_does_not_equal"===o.filter.operator||"number_greater_than"===o.filter.operator||"number_less_than"===o.filter.operator||"number_greater_than_or_equal_to"===o.filter.operator||"number_less_than_or_equal_to"===o.filter.operator)return{property:n,filter:{operator:o.filter.operator,value:o.filter.value}};if("date_is"===o.filter.operator||"date_is_before"===o.filter.operator||"date_is_after"===o.filter.operator||"date_is_on_or_before"===o.filter.operator||"date_is_on_or_after"===o.filter.operator){const e=o.filter.value,t="relative"===e.type?{type:"relative",value:e.value}:e.value?{type:"exact",value:{type:"date",start_date:e.value}}:void 0;if(!t)return;return{property:n,filter:{operator:o.filter.operator,value:t,use_end:o.filter.use_end}}}if("enum_is"===o.filter.operator||"enum_is_not"===o.filter.operator)return{property:n,filter:{operator:o.filter.operator,value:o.filter.value}};if("enum_contains"===o.filter.operator||"enum_does_not_contain"===o.filter.operator)return{property:n,filter:{operator:o.filter.operator,value:o.filter.value}};if("checkbox_is"===o.filter.operator||"checkbox_is_not"===o.filter.operator)return{property:n,filter:{operator:o.filter.operator,value:o.filter.value}};if("relation_contains"===o.filter.operator||"relation_does_not_contain"===o.filter.operator)return{property:n,filter:{operator:o.filter.operator,value:o.filter.value}};if("is_empty"===o.filter.operator||"is_not_empty"===o.filter.operator)return{property:n,filter:{operator:o.filter.operator}};if("status_is"===o.filter.operator||"status_is_not"===o.filter.operator)return{property:n,filter:{operator:o.filter.operator,value:o.filter.value}};if("person_contains"===o.filter.operator||"person_does_not_contain"===o.filter.operator){const e=o.filter.value,t=Array.isArray(e)?e.map((e=>"relative"===e.type?{type:"relative",value:e.value}:{type:"exact",value:e.value?{table:u().oo,id:e.value}:void 0})):{type:"exact",value:e.value?{table:u().oo,id:e.value}:void 0};return{property:n,filter:{operator:o.filter.operator,value:t}}}(0,a().HB)(o.filter.operator)}({filter:e,databaseModule:o});return t?[t]:[]}{const t=B({filter:e,databaseModule:o});return t?[t]:[]}}))}}function D(e){const{sorts:t,databaseModule:o}=e;if(!t)return;const r=[];for(const a of t){const e=K({propertyKey:a.property,databaseModule:o});e&&r.push({property:e,direction:a.direction})}return r}},282273:(e,t,o)=>{o.d(t,{DX:()=>c,Y1:()=>d,bd:()=>y,rW:()=>u});o(16280),o(944114),o(898992),o(354520),o(803949),o(581454);var r=()=>o(287903),a=()=>o(725649),n=()=>o(496603),i=()=>o(183558),s=()=>o(630116),l=()=>o(94522),p=()=>o(809120);function d(e){if(n().Qd(e)){const t=Object.fromEntries(Object.entries(e).map((e=>{let[t,o]=e;return[t,d(o)]})).filter((e=>{let[t,o]=e;return void 0!==o})));return n().Im(t)?void 0:t}if(Array.isArray(e)){const t=n().oE(e.map(d));return n().Im(t)?void 0:t}if(null!=e&&("string"!=typeof e||""!==e))return e}function u(e){const t=function(e){var t;const{databaseModule:o,workflowValue:n,getCollectionSchema:s}=e,u=(0,a().DK)(null==o?void 0:o.state),c=null==u?void 0:u.pointer,y=null==u?void 0:u.propertyKeyToIdMap;if(!c||!y)return"needs-create";const f=s(c);if(!f)return"loading-database";if(null==o||!o.state)throw new Error("Database module state not found");const _=(null===(t=n.modules)||void 0===t?void 0:t.filter((e=>"database"===e.type)))||[],m={};for(const r of[..._,o]){const{state:e}=r.key===o.key?o:r;if(!(0,a().K$)(e))throw new Error("Database state not found");if(e.pointer&&e.propertyKeyToIdMap){m[r.key]={collectionPointer:e.pointer,propertyKeyToIdMap:e.propertyKeyToIdMap};for(const t of Object.keys(e.schema))m[r.key].propertyKeyToIdMap[t]=e.propertyKeyToIdMap[t]||(0,i().Ay)()}}const b=(0,r().Vn)({notionSchema:f,databaseKey:o.key,databaseKeyMap:m}),{schema:v}=(0,p().uD)({databaseKeyMap:m,diff:(0,l().vL)({oldState:void 0,newState:o.state}),notionSchema:f,connectedRelationCollections:b});return{workflowSchema:d(v),notionSchema:d(f)}}({databaseModule:e.databaseModule,workflowValue:e.workflowValue,getCollectionSchema:e.getCollectionSchema});if("needs-create"===t||"loading-database"===t)return t;return n().n4(d(t.workflowSchema),d(t.notionSchema))?"synced":"needs-update"}function c(e){return t=>{const o=s().md.createChildStore(e,t);return null==o?void 0:o.getSchema()}}const y={getDescription:e=>e.formatMessage({defaultMessage:"This connection allows accessing and editing the connected Notion database.",id:"workflow.module.database.description"}),getName:(e,t)=>t.state?(0,n().ZH)(t.name||"Untitled"):e.formatMessage({defaultMessage:"Database",id:"workflow.module.database.title"}),getModuleConfigSection:()=>"databases"}},809120:(e,t,o)=>{o.d(t,{$e:()=>_,GG:()=>c,PP:()=>u,k3:()=>f,uD:()=>y});o(16280),o(898992),o(354520),o(672577),o(581454);var r=()=>o(919709),a=()=>o(287903),n=()=>o(725649),i=()=>o(531896),s=()=>o(183558),l=()=>o(534177),p=()=>o(630116),d=()=>o(94522);function u(e){const{collectionStore:t,databaseModules:o}=e,s=(0,r().q4_)(t.getName())||"",l=(0,a().PD)(s),p={type:"database",key:l,name:s,version:i().N.database.latestVersion,state:{schema:{},propertyKeyToIdMap:{},pointer:t.getSpaceShardedPointer(),accessScope:a().lp}},{schema:d,propertyKeyToIdMap:u}=(0,a().Rr)({databaseKey:l,schema:t.getSchema(),databaseModules:[...o,p]}),c=p.state;if(!(0,n().K$)(c))throw new Error("Database state not found");return c.schema=d,c.propertyKeyToIdMap=u,p}function c(e){const t={};for(const o of e){const{key:e,state:r}=o;if(!(0,n().K$)(r)||!r.schema)throw new Error("Database state not found");const a=r.propertyKeyToIdMap||{},i={};t[e]={collectionPointer:r.pointer,propertyKeyToIdMap:i};for(const[t,o]of Object.entries(r.schema))i[t]="title"===o.type?"title":a[t]||(0,s().Ay)()}return t}function y(e){const{databaseKeyMap:t,diff:o,notionSchema:r,connectedRelationCollections:n}=e,i=new Map(o.map((e=>[e.value.propertyId,e]))),s={},p={};for(const[d,u]of Object.entries(r)){if(!u)continue;const e=i.get(d);e?(p[d]=u,"removed"!==e.diff&&("changed"===e.diff||"added"===e.diff?s[d]=(0,a().ri)({key:e.value.key,workflowPropertySchema:e.value.property,notionPropertySchema:u,databaseKeyMap:t,connectedRelationCollections:n}):(0,l().HB)(e.diff))):s[d]=u}for(const[l,d]of i)s[l]||"removed"===d.diff||(s[l]=(0,a().ri)({key:d.value.key,workflowPropertySchema:d.value.property,notionPropertySchema:void 0,databaseKeyMap:t,connectedRelationCollections:n}));return{schema:s,deletedSchema:p}}function f(e){var t;const{dataBaseModule:o,workflowStore:r,databaseModules:i}=e;if(!(0,n().K$)(o.state))throw new Error("Database state not found");if(null===(t=o.state)||void 0===t||!t.pointer)throw new Error("Database pointer not found, must create and connect database before pulling from it");const s=p().md.createChildStore(r,o.state.pointer),{schema:l,propertyKeyToIdMap:d}=(0,a().Rr)({databaseKey:o.key,schema:s.getSchema(),databaseModules:i});return o.state.schema=l,o.state.propertyKeyToIdMap=d,o}function _(e){const{workflowStore:t,store:o}=e,r=(0,d().dh)(t),a=(r.modules||[]).filter((e=>"database"===e.type)),n=(r.modules||[]).map((e=>"database"!==e.type?e:f({dataBaseModule:e,workflowStore:t,databaseModules:a}))),i=(0,d().u1)({store:o,modules:n,views:r.views||[]});return{...r,modules:n,views:i}}}}]);